from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import CommandStart, or_f

from config_data.config import Config, load_config
from module.data_base import create_table_users, create_table_category, add_user, get_list_category, get_select, \
    set_select, get_title_category, set_phone, get_info_user
from keyboards.keyboard_user import keyboards_user, keyboards_create_list_category, keyboard_confirm_list_category, \
    keyboards_get_contact, keyboard_confirm_phone, keyboard_confirm_phone_1

from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.fsm.state import State, StatesGroup, default_state

import logging
import re

router = Router()
user_dict = {}
config: Config = load_config()


class User(StatesGroup):
    phone = State()

def validate_russian_phone_number(phone_number):
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    # –†–æ—Å—Å–∏–π—Å–∫–∏–µ –Ω–æ–º–µ—Ä–∞ –º–æ–≥—É—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å +7, 8, –∏–ª–∏ –±–µ–∑ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã
    pattern = re.compile(r'^(\+7|8|7)?(\d{10})$')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω—É
    match = pattern.match(phone_number)

    return bool(match)


@router.message(CommandStart())
async def process_start_command_user(message: Message) -> None:
    logging.info("process_start_command_user")
    """
    –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º –∏ –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫
    :param message: 
    :return: 
    """
    create_table_users()
    create_table_category()
    add_user(id_user=message.chat.id, user_name=message.from_user.username)
    await message.answer(text=f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name} üëã\n"
                              f"–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å  –∏ —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É",
                         reply_markup=keyboards_user())

    list_select_category = get_select(telegram_id=message.chat.id)

    if list_select_category == "-" or len(list_select_category) == 0:
        list_user = []
    else:
        if ',' in list_select_category:
            list_user = [int(item) for item in list_select_category.split(',')]
        else:
            list_user = [int(list_select_category)]
    list_category = []
    for item in get_list_category():
        if item[0] in list_user:
            list_category.append([item[0], item[1], 1])
        else:
            list_category.append([item[0], item[1], 0])

    keyboard = keyboards_create_list_category(list_category=list_category,
                                              back=0,
                                              forward=2,
                                              count=6)
    await message.answer(text="–û—Ç–º–µ—Ç—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚úÖ ,–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø–æ –∫–æ—Ç–æ—Ä—ã–º –±—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—Ç—å"
                              " –∑–∞—è–≤–∫–∏. –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.",
                         reply_markup=keyboard)


# >>>>
@router.callback_query(F.data.startswith('categoryforward'))
async def process_forward(callback: CallbackQuery) -> None:
    """
    –î–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏—é, –µ—Å–ª–∏ –≤ –±–ª–æ–∫–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    :param callback: callback.data.split('_')[1] –Ω–æ–º–µ—Ä –±–ª–æ–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    :return:
    """
    logging.info(f'process_forward: {callback.message.chat.id}')
    forward = int(callback.data.split('_')[1]) + 1
    back = forward - 2
    list_select_category = get_select(telegram_id=callback.message.chat.id)
    if list_select_category == "-" or len(list_select_category) == 0:
        list_user = []
    else:
        if ',' in list_select_category:
            list_user = [int(item) for item in list_select_category.split(',')]
        else:
            list_user = [int(list_select_category)]
    list_category = []
    for item in get_list_category():
        if item[0] in list_user:
            list_category.append([item[0], item[1], 1])
        else:
            list_category.append([item[0], item[1], 0])
    keyboard = keyboards_create_list_category(list_category=list_category,
                                              back=back,
                                              forward=forward,
                                              count=6)
    try:
        await callback.message.edit_text(text="–û—Ç–º–µ—Ç—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚úÖ ,–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø–æ –∫–æ—Ç–æ—Ä—ã–º –±—ã"
                                              " —Ö–æ—Çe–ª–∏ –ø–æ–ª—É—á–∞—Ç—å –∑–∞—è–≤–∫–∏. –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.",
                                         reply_markup=keyboard)
    except:
        await callback.message.edit_text(text="–û—Ç–º–µ—Ç—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚úÖ ,–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø–æ –∫–æ—Ç–æ—Ä—ã–º –±—ã"
                                              " —Ö–æ—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—Ç—å –∑–∞—è–≤–∫–∏. –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.",
                                         reply_markup=keyboard)


# <<<<
@router.callback_query(F.data.startswith('playerback'))
async def process_back(callback: CallbackQuery) -> None:
    """
    –î–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏—é, –µ—Å–ª–∏ –≤ –±–ª–æ–∫–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    :param callback: callback.data.split('_')[1] –Ω–æ–º–µ—Ä –±–ª–æ–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    :return:
    """
    logging.info(f'process_back: {callback.message.chat.id}')
    back = int(callback.data.split('_')[1]) - 1
    forward = back + 2
    list_select_category = get_select(telegram_id=callback.message.chat.id)
    if list_select_category == "0" or len(list_select_category) == 0:
        list_user = []
    else:
        if ',' in list_select_category:
            list_user = [int(item) for item in list_select_category.split(',')]
        else:
            list_user = [int(list_select_category)]
    list_category = []
    for item in get_list_category():
        if item[0] in list_user:
            list_category.append([item[0], item[1], 1])
        else:
            list_category.append([item[0], item[1], 0])
    keyboard = keyboards_create_list_category(list_category=list_category,
                                              back=back,
                                              forward=forward,
                                              count=6)
    try:
        await callback.message.edit_text(text="–û—Ç–º–µ—Ç—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚úÖ ,–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø–æ –∫–æ—Ç–æ—Ä—ã–º –±—ã"
                                              " —Ö–æ—Çe–ª–∏ –ø–æ–ª—É—á–∞—Ç—å –∑–∞—è–≤–∫–∏. –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.",
                                         reply_markup=keyboard)
    except:
        await callback.message.edit_text(text="–û—Ç–º–µ—Ç—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚úÖ ,–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø–æ –∫–æ—Ç–æ—Ä—ã–º –±—ã"
                                              " —Ö–æ—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—Ç—å –∑–∞—è–≤–∫–∏. –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.",
                                         reply_markup=keyboard)


# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—É
@router.callback_query(F.data.startswith('selectcategory_'))
async def process_select_category(callback: CallbackQuery) -> None:
    """
    –ü–µ—Ä–µ–≤–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ø–æ—è–≤–ª—è—é—Ç—Å—è —ç–º–æ–¥–∑–∏ ‚ùå –∏ ‚úÖ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞
    :param callback: callback.data.split('_')[1] —Å–æ–¥–µ—Ä–∂–∏—Ç id –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞—è–≤–∫–∏
    :return:
    """
    logging.info(f'process_select_player: {callback.message.chat.id}')
    category_id = int(callback.data.split('_')[1])

    list_select_category = get_select(telegram_id=callback.message.chat.id)
    if list_select_category == "0" or len(list_select_category) == 0:
        list_user = []
    else:
        if ',' in list_select_category:
            list_user = [int(item) for item in list_select_category.split(',')]
        else:
            list_user = [int(list_select_category)]
    if category_id in list_user:
        list_user.remove(category_id)

        set_select(list_category=','.join(map(str, list_user)), telegram_id=callback.message.chat.id)
    else:
        list_user.append(category_id)
        set_select(list_category=','.join(map(str, list_user)), telegram_id=callback.message.chat.id)
    list_category = []
    for item in get_list_category():
        if item[0] in list_user:
            list_category.append([item[0], item[1], 1])
        else:
            list_category.append([item[0], item[1], 0])

    keyboard = keyboards_create_list_category(list_category=list_category,
                                              back=0,
                                              forward=2,
                                              count=6)
    try:
        await callback.message.edit_text(text="–û—Ç–º–µ—Ç—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚úÖ ,–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø–æ –∫–æ—Ç–æ—Ä—ã–º –±—ã"
                                              " —Ö–æ—Çe–ª–∏ –ø–æ–ª—É—á–∞—Ç—å –∑–∞—è–≤–∫–∏. –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.",
                                         reply_markup=keyboard)
    except:
        await callback.message.edit_text(text="–û—Ç–º–µ—Ç—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚úÖ ,–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø–æ –∫–æ—Ç–æ—Ä—ã–º –±—ã"
                                              " —Ö–æ—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—Ç—å –∑–∞—è–≤–∫–∏. –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.",
                                         reply_markup=keyboard)


@router.callback_query(F.data == 'create_list_user_category')
async def process_create_command(callback: CallbackQuery) -> None:
    """
    –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –∏–≥—Ä—É (–∑–∞—è–≤–∫–∏ –Ω–∞ –∏–≥—Ä—É)
    :param callback:
    :return:
    """
    logging.info(f'create_list_user_category: {callback.message.chat.id}')
    list_select_category = get_select(telegram_id=callback.message.chat.id)
    if list_select_category == "0" or len(list_select_category) == 0:
        list_user = []
    else:
        if ',' in list_select_category:
            list_user = [int(item) for item in list_select_category.split(',')]
        else:
            print(list_select_category)
            list_user = [int(list_select_category)]
    list_category = get_list_category()

    text = f'<b>–°–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:</b>\n'
    for i, id_category in enumerate(list_user):
        print(id_category)
        title_category = get_title_category(id_category=id_category)
        text += f'{i+1}. {title_category}\n'
    await callback.message.edit_text(text=text,
                                     reply_markup=keyboard_confirm_list_category(),
                                     parse_mode='html')


@router.callback_query(F.data == 'change_user_category')
async def process_change_command(callback: CallbackQuery, bot: Bot) -> None:
    """
    –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–∞ –∫–æ–º–∞–Ω–¥—ã (–∑–∞—è–≤–∫–∏ –Ω–∞ –∏–≥—Ä—É)
    :param callback:
    :param state:
    :return:
    """
    logging.info(f'process_change_command: {callback.message.chat.id}')
    await bot.delete_message(chat_id=callback.message.chat.id,
                             message_id=callback.message.message_id)
    list_select_category = get_select(telegram_id=callback.message.chat.id)
    if list_select_category == "0" or len(list_select_category) == 0:
        list_user = []
    else:
        if ',' in list_select_category:
            list_user = [int(item) for item in list_select_category.split(',')]
        else:
            list_user = [int(list_select_category)]
    list_category = []
    for item in get_list_category():
        if item[0] in list_user:
            list_category.append([item[0], item[1], 1])
        else:
            list_category.append([item[0], item[1], 0])

    keyboard = keyboards_create_list_category(list_category=list_category,
                                              back=0,
                                              forward=2,
                                              count=6)
    await callback.message.answer(text="–û—Ç–º–µ—Ç—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚úÖ ,–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø–æ –∫–æ—Ç–æ—Ä—ã–º –±—ã —Ö–æ—Ç–µ–ª–∏ "
                                       "–ø–æ–ª—É—á–∞—Ç—å –∑–∞—è–≤–∫–∏. –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.",
                                  reply_markup=keyboard)


@router.callback_query(F.data == 'confirm_user_category')
async def process_confirm_command(callback: CallbackQuery, bot: Bot, state: FSMContext) -> None:
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Å—Ç–∞–≤–∞ –∫–æ–º–∞–Ω–¥—ã (–∑–∞—è–≤–∫–∏ –Ω–∞ –∏–≥—Ä—É)
    :param callback:
    :param bot:
    :return:
    """
    logging.info(f'process_confirm_command: {callback.message.chat.id}')
    await bot.delete_message(chat_id=callback.message.chat.id,
                             message_id=callback.message.message_id)
    await callback.answer(text='–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ—â–µ–Ω –≤ –±–∞–∑—É', show_alert=True)
    list_info_user = get_info_user(telegram_id=callback.message.chat.id)
    if list_info_user[-1] == "0":
        await callback.message.answer(
            text='–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç –∑–∞ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –≤–∞–º–∏ –∑–∞—è–≤–∫–∏ —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞'
                 ' –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç ‚òéÔ∏è"',
            reply_markup=keyboards_get_contact())
        await state.set_state(User.phone)
    else:
        await callback.message.answer(text=f'–¢–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, {list_info_user[-1]}. –í–µ—Ä–Ω–æ?',
                                      reply_markup=keyboard_confirm_phone_1())


@router.message(or_f(F.text, F.contact), StateFilter(User.phone))
async def process_validate_russian_phone_number(message: Message, state: FSMContext) -> None:
    logging.info("process_start_command_user")
    if message.contact:
        phone = str(message.contact.phone_number)
    else:
        phone = message.text
        if not validate_russian_phone_number(phone):
            await message.answer(text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä 89991112222:")
            return
    await state.update_data(phone=phone)
    await state.set_state(default_state)
    await message.answer(text=f'–ó–∞–ø–∏—Å—ã–≤–∞—é, {phone}. –í–µ—Ä–Ω–æ?',
                         reply_markup=keyboard_confirm_phone())


@router.callback_query(F.data == 'confirm_phone')
async def process_confirm_phone(callback: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    logging.info(f'process_confirm_phone: {callback.message.chat.id}')
    user_dict[callback.message.chat.id] = await state.get_data()
    phone = user_dict[callback.message.chat.id]['phone']
    set_phone(telegram_id=callback.message.chat.id, phone=phone)
    await bot.delete_message(chat_id=callback.message.chat.id,
                             message_id=callback.message.message_id)
    await callback.message.answer(text='–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–Ω–µ—Å–µ–Ω –≤ –±–∞–∑—É',
                                  reply_markup=ReplyKeyboardRemove())
    await callback.message.answer(text=f"–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏ —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É",
                                  reply_markup=keyboards_user())


@router.callback_query(F.data == 'confirm_phone_1')
async def process_confirm_phone_1(callback: CallbackQuery, bot: Bot) -> None:
    logging.info(f'process_confirm_phone_1: {callback.message.chat.id}')
    await bot.delete_message(chat_id=callback.message.chat.id,
                             message_id=callback.message.message_id)


@router.callback_query(F.data == 'getphone_back')
async def process_confirm_username(callback: CallbackQuery, bot: Bot, state: FSMContext) -> None:
    logging.info(f'process_confirm_username: {callback.message.chat.id}')
    await bot.delete_message(chat_id=callback.message.chat.id,
                             message_id=callback.message.message_id)
    await callback.message.answer(
        text='–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç –∑–∞ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –≤–∞–º–∏ –∑–∞—è–≤–∫–∏ —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞'
             ' –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç ‚òéÔ∏è"',
        reply_markup=keyboards_get_contact())
    await state.set_state(User.phone)
